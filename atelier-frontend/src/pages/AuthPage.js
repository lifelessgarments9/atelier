import React, { useState } from 'react';
import './AuthPage.css';
import { useNavigate } from 'react-router-dom';

function AuthPage({onLogin }) {
    const navigate = useNavigate();
    const [activeTab, setActiveTab] = useState('login'); // register –∏–ª–∏ login
    const [step, setStep] = useState('register'); // register ‚Üí verify (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    const [output, setOutput] = useState('');
    const [deepLink, setDeepLink] = useState('');

    const [registerData, setRegisterData] = useState({
        tg: '',
        pass: '',
        confirmPass: ''
    });

    const [verifyData, setVerifyData] = useState({
        tg: '',
        code: ''
    });

    const [loginData, setLoginData] = useState({
        tg: '',
        pass: ''
    });

    const API_URL = 'http://localhost:5041/api/auth';

    // ------------------ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ------------------
    const register = async () => {
        if (registerData.pass !== registerData.confirmPass) {
            setOutput('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            return;
        }
        if (!registerData.tg) {
            setOutput('‚ùå –í–≤–µ–¥–∏—Ç–µ Telegram username (–±–µ–∑ @)');
            return;
        }

        try {
            const cleanUsername = registerData.tg.replace('@', '').trim();
            const res = await fetch(`${API_URL}/register`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    TgUsername: cleanUsername,
                    Password: registerData.pass
                })
            });

            const data = await res.json();
            if (!res.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º deep link –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (data.deepLink) {
                setDeepLink(data.deepLink);
                setOutput(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ Telegram.`);
            } else {
                setOutput('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞.');
            }

            setVerifyData({ tg: cleanUsername, code: '' });
            setStep('verify');
        } catch (err) {
            setOutput(`‚ùå ${err.message}`);
        }
    };

    // ------------------ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø ------------------
    const verify = async () => {
        if (!verifyData.code) {
            setOutput('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram');
            return;
        }

        try {
            const res = await fetch(`${API_URL}/verify`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    TgUsername: verifyData.tg,
                    Code: verifyData.code
                })
            });

            const data = await res.json();
            if (!res.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');

            setOutput(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.username}!`);
            setTimeout(() => {
                onLogin(data.username); // –ø–µ—Ä–µ–¥–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }, 1500);
        } catch (err) {
            setOutput(`‚ùå ${err.message}`);
        }
    };

    // ------------------ –í–•–û–î ------------------
    const login = async () => {
        if (!loginData.tg || !loginData.pass) {
            setOutput('–í–≤–µ–¥–∏—Ç–µ Telegram username –∏ –ø–∞—Ä–æ–ª—å');
            return;
        }

        try {
            const cleanUsername = loginData.tg.replace('@', '').trim();
            const res = await fetch(`${API_URL}/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    TgUsername: cleanUsername,
                    Password: loginData.pass
                })
            });

            const data = await res.json();
            if (!res.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');

            setOutput(`‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.username}!`);
            setTimeout(() => {
                onLogin(data.username);
            }, 1500);
        } catch (err) {
            setOutput(`‚ùå ${err.message}`);
        }
    };

    // ------------------ UI ------------------
    return (
        <div className="auth-page">
            <div className="auth-container">
                <button className="back-btn" onClick={() => navigate('/')}>
                    ‚Üê –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                </button>

                <div className="auth-tabs">
                    <button
                        className={`tab ${activeTab === 'login' ? 'active' : ''}`}
                        onClick={() => setActiveTab('login')}
                    >
                        –í—Ö–æ–¥
                    </button>
                    <button
                        className={`tab ${activeTab === 'register' ? 'active' : ''}`}
                        onClick={() => setActiveTab('register')}
                    >
                        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                    </button>
                </div>

                {/* --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø --- */}
                {activeTab === 'register' && step === 'register' && (
                    <div className="auth-form">
                        <h3>–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h3>

                        <div className="input-group">
                            <input
                                placeholder="Telegram username (–±–µ–∑ @)"
                                value={registerData.tg}
                                onChange={(e) => setRegisterData({ ...registerData, tg: e.target.value })}
                                required
                            />
                        </div>

                        <div className="input-group">
                            <input
                                placeholder="–ü–∞—Ä–æ–ª—å"
                                type="password"
                                value={registerData.pass}
                                onChange={(e) => setRegisterData({ ...registerData, pass: e.target.value })}
                                required
                            />
                        </div>

                        <div className="input-group">
                            <input
                                placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                                type="password"
                                value={registerData.confirmPass}
                                onChange={(e) => setRegisterData({ ...registerData, confirmPass: e.target.value })}
                                required
                            />
                        </div>

                        <button className="auth-submit-btn" onClick={register}>
                            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                        </button>
                    </div>
                )}

                {/* --- –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ö–û–î–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) --- */}
                {activeTab === 'register' && step === 'verify' && (
                    <div className="auth-form">
                        <h3>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h3>
                        <p>–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –Ω–∞ Telegram @{verifyData.tg}</p>

                        {deepLink && (
                            <div className="deep-link-section">
                                <p><strong>–®–∞–≥ 1:</strong> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ Telegram:</p>
                                <div className="deep-link-container">
                                    <a href={deepLink} target="_blank" rel="noopener noreferrer" className="deep-link">
                                        üîó –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Telegram
                                    </a>
                                    <button
                                        className="copy-btn"
                                        onClick={() => navigator.clipboard.writeText(deepLink)}
                                        title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"
                                    >
                                        üìã
                                    </button>
                                </div>
                                <p><strong>–®–∞–≥ 2:</strong> –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥</p>
                                <p><strong>–®–∞–≥ 3:</strong> –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ:</p>
                            </div>
                        )}

                        <div className="input-group">
                            <input
                                placeholder="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ Telegram"
                                value={verifyData.code}
                                onChange={(e) => setVerifyData({ ...verifyData, code: e.target.value })}
                                maxLength={6}
                                required
                            />
                        </div>

                        <button className="auth-submit-btn" onClick={verify}>
                            –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                        </button>

                        <button className="auth-link-btn" onClick={() => setStep('register')}>
                            ‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                        </button>
                    </div>
                )}

                {/* --- –í–•–û–î --- */}
                {activeTab === 'login' && (
                    <div className="auth-form">
                        <h3>–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</h3>

                        <div className="input-group">
                            <input
                                placeholder="Telegram username (–±–µ–∑ @)"
                                value={loginData.tg}
                                onChange={(e) => setLoginData({ ...loginData, tg: e.target.value })}
                                required
                            />
                        </div>

                        <div className="input-group">
                            <input
                                placeholder="–ü–∞—Ä–æ–ª—å"
                                type="password"
                                value={loginData.pass}
                                onChange={(e) => setLoginData({ ...loginData, pass: e.target.value })}
                                required
                            />
                        </div>

                        <button className="auth-submit-btn" onClick={login}>
                            –í–æ–π—Ç–∏
                        </button>
                    </div>
                )}

                {output && <pre className="output">{output}</pre>}
            </div>
        </div>
    );
}

export default AuthPage;