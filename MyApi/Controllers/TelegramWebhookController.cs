using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MyApi.Models;
using MyApi.Services;

namespace MyApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TelegramWebhookController : ControllerBase
    {
        private readonly AtelierContext _context;
        private readonly TelegramService _telegram;
        private readonly ILogger<TelegramWebhookController> _logger;

        public TelegramWebhookController(AtelierContext context, TelegramService telegram, ILogger<TelegramWebhookController> logger)
        {
            _context = context;
            _telegram = telegram;
            _logger = logger;
        }

        [HttpPost("webhook")]
        public async Task<IActionResult> HandleWebhook([FromBody] TelegramUpdate update)
        {
            if (update.Message?.Text?.StartsWith("/start register_") == true)
            {
                var token = update.Message.Text.Replace("/start register_", "").Trim();
                var chatId = update.Message.Chat.Id;
                var username = update.Message.From.Username;

                var pendingReg = await _context.PendingRegistrations
                    .FirstOrDefaultAsync(pr => pr.Token == token && pr.ExpiresAt > DateTime.UtcNow);

                if (pendingReg == null)
                {
                    await _telegram.SendMessageByChatId(chatId, "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
                    return Ok();
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                pendingReg.TelegramChatId = chatId;
                pendingReg.VerificationCode = new Random().Next(100000, 999999).ToString();
                await _context.SaveChangesAsync();

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await _telegram.SendMessageByChatId(chatId, 
                    $"üîê **–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Atelier**\n\n" +
                    $"–í–∞—à –∫–æ–¥: `{pendingReg.VerificationCode}`\n\n" +
                    $"–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
            }

            return Ok();
        }
    }
}