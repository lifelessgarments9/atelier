using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MyApi.Models;
using MyApi.Models.DTOs;
using MyApi.Services;

namespace MyApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly AtelierContext _context;
        private readonly TelegramService _telegram;
        private readonly ILogger<AuthController> _logger;

        public AuthController(AtelierContext context, TelegramService telegram, ILogger<AuthController> logger)
        {
            _context = context;
            _telegram = telegram;
            _logger = logger;
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterDto request)
        {
            var cleanUsername = request.TgUsername.Replace("@", "").Trim();
            
            
            
            
            
            
            
            
            
            
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º username
            
            var existingUser = await _context.Users
                .FirstOrDefaultAsync(u => u.Username == cleanUsername);
                
            if (existingUser != null)
            {
                return BadRequest(new { message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
            }
            

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è deep link
            var token = Guid.NewGuid().ToString("N");
            var deepLink = $"https://t.me/AtelierAuthBot?start=register_{token}";

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            var pendingReg = new PendingRegistration
            {
                Token = token,
                Username = cleanUsername,
                PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password),
                CreatedAt = DateTime.UtcNow,
                ExpiresAt = DateTime.UtcNow.AddMinutes(30)
            };

            _context.PendingRegistrations.Add(pendingReg);
            await _context.SaveChangesAsync();

            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            try
            {
                var messageSent = await _telegram.SendMessageAsync(cleanUsername,
                    $"üîê **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Atelier**\n\n" +
                    $"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{deepLink}");

                if (!messageSent)
                {
                    _logger.LogWarning($"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{cleanUsername}");
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, $"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{cleanUsername}");
            }

            // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö —Å deep link
            return Ok(new { 
                message = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞",
                deepLink = deepLink
            });
        }

        [HttpPost("verify")]
        public async Task<IActionResult> Verify([FromBody] VerifyTelegramDto request)
        {
            var cleanUsername = request.TgUsername.Replace("@", "").Trim();
            
            var pendingReg = await _context.PendingRegistrations
                .FirstOrDefaultAsync(pr => pr.Username == cleanUsername && 
                                         pr.VerificationCode == request.Code &&
                                         pr.ExpiresAt > DateTime.UtcNow);

            if (pendingReg == null)
            {
                return BadRequest(new { message = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª" });
            }

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var user = new User
            {
                Username = cleanUsername,
                PasswordHash = pendingReg.PasswordHash,
                TelegramChatId = pendingReg.TelegramChatId,
                IsTelegramVerified = true
            };

            _context.Users.Add(user);
            _context.PendingRegistrations.Remove(pendingReg);
            await _context.SaveChangesAsync();

            return Ok(new { 
                message = "Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                username = cleanUsername
            });
        }
    }
}